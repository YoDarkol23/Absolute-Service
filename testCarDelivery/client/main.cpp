/**
 * @file client/main.cpp
 * @brief Точка входа клиентского приложения.
 * 
 * Этот файл отвечает за:
 * - Вывод текстового меню пользователю
 * - Приём выбора пользователя
 * - Вызов соответствующих функций из client/client.hpp
 * - Передачу параметров подключения (IP, порт)
 * 
 * ВАЖНО: Вся сетевая логика (формирование HTTP-запросов) находится в client/client.cpp.
 * Здесь только управление потоком программы.
 */

#include <iostream>
#include <string>
#include "client.hpp"  // Подключаем API клиента

/**
 * Главная функция программы.
 * 
 * Поддерживает передачу IP-адреса сервера через аргумент командной строки:
 *   ./client                 → подключается к 127.0.0.1 (локальный сервер)
 *   ./client 192.168.1.35    → подключается к серверу с указанным IP
 * 
 * @param argc Количество аргументов командной строки
 * @param argv Массив аргументов
 * @return 0 при успешном завершении
 */
int main(int argc, char* argv[]) {
    // Определяем IP-адрес сервера: по умолчанию — localhost
    std::string server_ip = "127.0.0.1";

    // Если пользователь передал IP-адрес — используем его
    if (argc > 1) {
        server_ip = argv[1];
    }

    // Показываем пользователю, к какому серверу идёт подключение
    std::cout << "Подключение к серверу: " << server_ip << ":8080\n";
    std::cout << "==========================================\n";
    std::cout << "   CAR DELIVERY — Клиент\n";
    std::cout << "==========================================\n";
    std::cout << "1. Показать все автомобили\n";
    std::cout << "0. Выйти\n";
    std::cout << "Ваш выбор: ";

    int choice;
    std::cin >> choice;

    if (choice == 1) {
        try {
            // Вызываем функцию из client/client.cpp
            // Передаём IP-адрес, полученный из аргумента или по умолчанию
            std::string response = fetch_all_cars(server_ip, 8080);

            std::cout << "\n--- Ответ от сервера ---\n";
            std::cout << response << "\n";
        } catch (const std::exception& e) {
            std::cerr << "Ошибка подключения: " << e.what() << std::endl;
            std::cerr << "Проверьте, запущен ли сервер и доступен ли IP " << server_ip << std::endl;
        }
    } else if (choice == 0) {
        std::cout << "Выход из программы.\n";
    } else {
        std::cout << "Неизвестная команда. Выход.\n";
    }

    return 0;
}