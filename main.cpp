#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <string>
#include <optional>
#include <iomanip>
#include <algorithm>
#include <filesystem>
#include "json.hpp"  // nlohmann/json

using json = nlohmann::json;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
struct Car {
    int id;
    std::string brand;
    std::string model;
    int year;
    double engine_volume;
    int auction_price_jpy;
    int shipping_to_vladivostok_jpy;
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
constexpr double JPY_TO_RUB = 0.63;  // –∫—É—Ä—Å –π–µ–Ω—ã –∫ —Ä—É–±–ª—é (–ø—Ä–∏–º–µ—Ä)
constexpr double EUR_TO_RUB = 90.0;  // –∫—É—Ä—Å –µ–≤—Ä–æ –∫ —Ä—É–±–ª—é
constexpr int CURRENT_YEAR = 2024;

// –ì–æ—Ä–æ–¥–∞: {–Ω–∞–∑–≤–∞–Ω–∏–µ, {—Å—Ç–æ–∏–º–æ—Å—Ç—å_–¥–æ—Å—Ç–∞–≤–∫–∏_‚ÇΩ, —Å—Ä–æ–∫_–¥–Ω–µ–π}}
const std::map<std::string, std::pair<int, int>> CITY_DELIVERY = {
    {"–ú–æ—Å–∫–≤–∞", {50000, 15}},
    {"–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", {55000, 18}},
    {"–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", {45000, 12}},
    {"–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", {48000, 14}},
    {"–ö–∞–∑–∞–Ω—å", {47000, 13}}
};

// –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ JSON
std::optional<std::vector<Car>> loadCars(const std::string& filename) {
    if (!std::filesystem::exists(filename)) {
        std::cerr << "‚ùå –§–∞–π–ª " << filename << " –Ω–µ –Ω–∞–π–¥–µ–Ω.\n";
        return std::nullopt;
    }

    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª " << filename << ".\n";
        return std::nullopt;
    }

    try {
        json j;
        file >> j;

        std::vector<Car> cars;
        for (const auto& item : j) {
            Car car;
            car.id = item.at("id");
            car.brand = item.at("brand");
            car.model = item.at("model");
            car.year = item.at("year");
            car.engine_volume = item.at("engine_volume");
            car.auction_price_jpy = item.at("auction_price_jpy");
            car.shipping_to_vladivostok_jpy = item.at("shipping_to_vladivostok_jpy");
            cars.push_back(car);
        }
        return cars;
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: " << e.what() << "\n";
        return std::nullopt;
    }
}

// –†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–π –ø–æ—à–ª–∏–Ω—ã –≤ —Ä—É–±–ª—è—Ö
int calculateCustomsDuty(int year, double engine_volume, int invoice_rub) {
    int age = CURRENT_YEAR - year;
    double rate_per_cc = 0.0;
    double min_duty_eur = 0.0;

    if (age > 3) {
        // –°—Ç–∞—Ä—à–µ 3 –ª–µ—Ç ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞ —Å–º¬≥
        if (engine_volume <= 1000) rate_per_cc = 1.5;
        else if (engine_volume <= 1500) rate_per_cc = 1.7;
        else if (engine_volume <= 1800) rate_per_cc = 2.5;
        else if (engine_volume <= 2300) rate_per_cc = 2.7;
        else if (engine_volume <= 3000) rate_per_cc = 3.0;
        else rate_per_cc = 3.6;
        return static_cast<int>(engine_volume * rate_per_cc * EUR_TO_RUB);
    } else {
        // 3 –≥–æ–¥–∞ –∏ –º–ª–∞–¥—à–µ ‚Äî 48% –æ—Ç –∏–Ω–≤–æ–π—Å–∞, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã
        double duty_percent = invoice_rub * 0.48;
        if (engine_volume <= 1000) min_duty_eur = 2.5;
        else if (engine_volume <= 1500) min_duty_eur = 3.0;
        else if (engine_volume <= 1800) min_duty_eur = 3.2;
        else if (engine_volume <= 2300) min_duty_eur = 3.5;
        else if (engine_volume <= 3000) min_duty_eur = 4.8;
        else min_duty_eur = 5.0;

        double min_duty_rub = engine_volume * min_duty_eur * EUR_TO_RUB;
        return static_cast<int>(std::max(duty_percent, min_duty_rub));
    }
}

// –†–∞—Å—á–µ—Ç —É—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞
int calculateUtilizationFee(int year) {
    int age = CURRENT_YEAR - year;
    return (age <= 3) ? 3400 : 5200;
}

// –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
std::optional<std::string> selectCity() {
    std::cout << "\nüöö –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:\n";
    int i = 1;
    std::vector<std::string> cityList;
    for (const auto& [city, _] : CITY_DELIVERY) {
        std::cout << i++ << ". " << city << "\n";
        cityList.push_back(city);
    }

    int choice;
    std::cout << "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞: ";
    std::cin >> choice;

    if (choice < 1 || choice > static_cast<int>(cityList.size())) {
        std::cerr << "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞.\n";
        return std::nullopt;
    }
    return cityList[choice - 1];
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
int main() {
    setlocale(LC_ALL, "Russian");  // –¥–ª—è Windows, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞

    auto cars = loadCars("cars.json");
    if (!cars.has_value()) {
        return 1;
    }

    if (cars->empty()) {
        std::cout << "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.\n";
        return 0;
    }

    std::cout << "üöò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:\n";
    for (const auto& car : *cars) {
        std::cout << car.id << ". " << car.brand << " " << car.model
                  << " (" << car.year << ", " << car.engine_volume << "L)\n";
    }

    int carId;
    std::cout << "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ";
    std::cin >> carId;

    auto it = std::find_if(cars->begin(), cars->end(),
        [carId](const Car& c) { return c.id == carId; });

    if (it == cars->end()) {
        std::cerr << "‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID " << carId << " –Ω–µ –Ω–∞–π–¥–µ–Ω.\n";
        return 1;
    }

    Car selectedCar = *it;

    auto selectedCity = selectCity();
    if (!selectedCity.has_value()) {
        return 1;
    }

    auto [deliveryCost, deliveryDays] = CITY_DELIVERY.at(*selectedCity);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä—É–±–ª–∏
    int auction_rub = static_cast<int>(selectedCar.auction_price_jpy * JPY_TO_RUB);
    int shipping_rub = static_cast<int>(selectedCar.shipping_to_vladivostok_jpy * JPY_TO_RUB);
    int invoice_rub = auction_rub + shipping_rub;

    // –†–∞—Å—á–µ—Ç—ã
    int customs = calculateCustomsDuty(selectedCar.year, selectedCar.engine_volume, invoice_rub);
    int utilization = calculateUtilizationFee(selectedCar.year);
    int vat = static_cast<int>((invoice_rub + customs) * 0.20);  // –ù–î–° 20%
    int total = invoice_rub + customs + vat + utilization + deliveryCost;

    // –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
    std::cout << "\n" << std::string(50, '=') << "\n";
    std::cout << "üìã –ò–¢–û–ì–û–í–´–ô –†–ê–°–ß–ï–¢ –î–û–°–¢–ê–í–ö–ò\n";
    std::cout << std::string(50, '=') << "\n";
    std::cout << "–ê–≤—Ç–æ–º–æ–±–∏–ª—å: " << selectedCar.brand << " " << selectedCar.model
              << " (" << selectedCar.year << ", " << selectedCar.engine_volume << "L)\n";
    std::cout << "–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: " << *selectedCity << "\n\n";

    std::cout << std::fixed << std::setprecision(0);
    std::cout << "1. –ò–Ω–≤–æ–π—Å (–∞—É–∫—Ü–∏–æ–Ω + –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞): " << invoice_rub << " ‚ÇΩ\n";
    std::cout << "   - –ê—É–∫—Ü–∏–æ–Ω: " << auction_rub << " ‚ÇΩ\n";
    std::cout << "   - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: " << shipping_rub << " ‚ÇΩ\n";
    std::cout << "2. –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: " << customs << " ‚ÇΩ\n";
    std::cout << "3. –ù–î–° (20%): " << vat << " ‚ÇΩ\n";
    std::cout << "4. –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: " << utilization << " ‚ÇΩ\n";
    std::cout << "5. –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –≥–æ—Ä–æ–¥–∞: " << deliveryCost << " ‚ÇΩ\n";
    std::cout << "---------------------------\n";
    std::cout << "üí∞ –ò–¢–û–ì–û: " << total << " ‚ÇΩ\n";
    std::cout << "‚è±Ô∏è  –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: " << deliveryDays << " —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n";
    std::cout << std::string(50, '=') << "\n";

    return 0;
}
